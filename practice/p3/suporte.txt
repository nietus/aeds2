java

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Person {
    private String name;
    private int age;
    private int size;

    public Person(String name, int age, int size) {
        this.name = name;
        this.age = age;
        this.size = size;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public int getSize() {
        return size;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Person> people = new ArrayList<>();
        people.add(new Person("Alice", 25, 170));
        people.add(new Person("Charlie", 30, 165));
        people.add(new Person("Bob", 22, 180));

        people.sort(Comparator.comparing(Person::getName)
                       .thenComparing(Person::getAge)
                       .thenComparing(Person::getSize).reversed());

        for (Person person : people) {
            System.out.println("Name: " + person.getName() + ", Age: " + person.getAge() + ", Size: " + person.getSize());
        }
    }
}

In this example, the sizeComparator is created using the Comparator.comparing method, and the reversed method is called to sort in descending order. The people list is then sorted using the composite comparator, resulting in a list of Person objects sorted first by name and age in ascending order and then by size in descending order.

List Methods:
Adding Elements:

add(E element): Adds the specified element to the end of the list.
add(int index, E element): Inserts the specified element at the specified position in the list.
Accessing Elements:

get(int index): Returns the element at the specified position in the list.
Removing Elements:

remove(int index): Removes the element at the specified position in the list.
remove(Object obj): Removes the first occurrence of the specified element from the list.
Checking Size:

size(): Returns the number of elements in the list.
Checking Existence:

contains(Object obj): Returns true if the list contains the specified element.
Iterating:

forEach(Consumer<? super E> action): Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.
Sorting:

sort(Comparator<? super E> c): Sorts the elements of the list according to the specified comparator.
Fila (Queue) Methods:
Adding Elements:

add(E element): Adds the specified element to the end of the queue.
Accessing and Removing Elements:

poll(): Retrieves and removes the head of the queue, or returns null if the queue is empty.
peek(): Retrieves, but does not remove, the head of the queue, or returns null if the queue is empty.
Checking Size:

size(): Returns the number of elements in the queue.
Checking Existence:

contains(Object obj): Returns true if the queue contains the specified element.
Pilha (Stack) Methods:
Adding Elements:

push(E item): Pushes an element onto the stack.
Accessing and Removing Elements:

pop(): Removes the object at the top of this stack and returns that object.
peek(): Looks at the object at the top of this stack without removing it from the stack.
Checking Size:

size(): Returns the number of elements in the stack.
Checking Existence:

contains(Object obj): Returns true if the stack contains the specified element.
Remember that for both Queue and Stack, there are multiple implementations in Java, such as LinkedList, ArrayDeque, and PriorityQueue. The methods mentioned here are general and may vary slightly depending on the specific implementation.

List Implementation:

import java.util.ArrayList;
import java.util.List;

public class ListExample {
    public static void main(String[] args) {
        // Creating a List
        List<String> myList = new ArrayList<>();

        // Adding elements
        myList.add("Item 1");
        myList.add("Item 2");
        myList.add("Item 3");

        // Accessing elements
        System.out.println("Element at index 1: " + myList.get(1));

        // Removing an element
        myList.remove("Item 2");

        // Iterating through the list
        System.out.println("Elements in the list:");
        for (String item : myList) {
            System.out.println(item);
        }
    }
}


Queue (Fila) Implementation:

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        // Creating a Queue
        Queue<String> myQueue = new LinkedList<>();

        // Adding elements
        myQueue.add("Task 1");
        myQueue.add("Task 2");
        myQueue.add("Task 3");

        // Accessing and removing elements
        while (!myQueue.isEmpty()) {
            System.out.println("Processing: " + myQueue.poll());
        }
    }
}

Stack (Pilha) Implementation:

import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        // Creating a Stack
        Stack<String> myStack = new Stack<>();

        // Adding elements
        myStack.push("Step 1");
        myStack.push("Step 2");
        myStack.push("Step 3");

        // Accessing and removing elements
        while (!myStack.isEmpty()) {
            System.out.println("Completed: " + myStack.pop());
        }
    }
}